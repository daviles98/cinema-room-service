type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/Seat.java
  visible: true
  text: "package cinema;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\n\
    public class Seat {\n\n    private int row;\n    private int column;\n    \n \
    \   private int price;\n\n    @JsonIgnore\n    private boolean booked;\n\n   \
    \ public Seat() {\n    }\n\n    public Seat(int row, int column, int price) {\n\
    \        this.row = row;\n        this.column = column;\n        this.price =\
    \ price;\n    }\n\n    public int getPrice() {\n        return price;\n    }\n\
    \n    public void setPrice(int price) {\n        this.price = price;\n    }\n\n\
    \    public boolean isBooked() {\n        return booked;\n    }\n\n    public\
    \ void setBooked(boolean booked) {\n        this.booked = booked;\n    }\n\n \
    \   public int getRow() {\n        return row;\n    }\n\n    public void setRow(int\
    \ row) {\n        this.row = row;\n    }\n\n    public int getColumn() {\n   \
    \     return column;\n    }\n\n    public void setColumn(int column) {\n     \
    \   this.column = column;\n    }\n\n    @Override\n    public String toString()\
    \ {\n        return \"Seat{\" +\n                \"row=\" + row +\n          \
    \      \", column=\" + column +\n                \", price=\" + price +\n    \
    \            \", booked=\" + booked +\n                '}';\n    }\n}\n"
  learner_created: true
- name: src/cinema/ErrorMessage.java
  visible: true
  text: |
    package cinema;

    public class ErrorMessage {
        private String error;

        public ErrorMessage(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }
    }
  learner_created: true
- name: src/cinema/CinemaExceptionHandler.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    @ControllerAdvice
    public class CinemaExceptionHandler {

        @ExceptionHandler(OutOfBoundsException.class)
        public ResponseEntity<ErrorMessage> handleOutOfBoundsException(OutOfBoundsException ex){
            ErrorMessage message = new ErrorMessage(ex.getMessage());
            return new ResponseEntity<ErrorMessage>(message, HttpStatus.BAD_REQUEST);
        }

    }
  learner_created: true
- name: src/cinema/CinemaRoomController.java
  visible: true
  text: |
    package cinema;

    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class CinemaRoomController {
        private CinemaRoom cinemaRoom = new CinemaRoom();

        @GetMapping("/seats")
        public CinemaRoom getSeats(){
            return cinemaRoom;
        }

        @PostMapping("/purchase")
        public Seat purchase(@RequestBody Seat seat) {
            boolean invalidRowRange = seat.getRow() > 9 || seat.getRow() < 1;
            boolean invalidColumnRange = seat.getColumn() > 9 || seat.getColumn() < 1;
            if (invalidRowRange || invalidColumnRange) {
                throw new OutOfBoundsException("The number of a row or a column is out of bounds!");
            }
            int index = 9 * (seat.getRow() - 1) + (seat.getColumn() - 1);
            Seat selectedSeat = cinemaRoom.getAvailableSeats().get(index);
            if(selectedSeat.isBooked()) {
                throw new OutOfBoundsException("The ticket has been already purchased!");
            } else {
                selectedSeat.setBooked(true);
                System.out.println(selectedSeat);
                return cinemaRoom.getAvailableSeats().get(index);
            }
        }

    }
  learner_created: true
- name: src/cinema/CinemaRoom.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.concurrent.ConcurrentMap;

    public class CinemaRoom {

        @JsonProperty("total_rows")
        private int totalRows = 9;
        @JsonProperty("total_columns")
        private int totalColumns = 9;

        @JsonProperty("available_seats")
        private List<Seat> availableSeats = new ArrayList<>(totalRows*totalColumns);

        public CinemaRoom() {
            for(int r = 0; r < totalRows; r++) {
                int price = (r+1 <= 4) ? 10 : 8;
                for(int c = 0; c < totalColumns; c++) {
                    availableSeats.add(new Seat(r+1,c+1, price));
                }
            }
        }

        public CinemaRoom(int totalRows, int totalColumns, List<Seat> availableSeats) {
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;
            this.availableSeats = availableSeats;
        }

        public int getTotalRows() {
            return totalRows;
        }

        public void setTotalRows(int totalRows) {
            this.totalRows = totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }

        public void setTotalColumns(int totalColumns) {
            this.totalColumns = totalColumns;
        }

        public List<Seat> getAvailableSeats() {
            return availableSeats;
        }

        public void setAvailableSeats(List<Seat> availableSeats) {
            this.availableSeats = availableSeats;
        }
    }
  learner_created: true
- name: src/cinema/PurchaseException.java
  visible: true
  text: |
    package cinema;


    public class OutOfBoundsException extends RuntimeException {

        private static final long serialVersionUID = 1L;

        public OutOfBoundsException(String msg) {
            super(msg);
        }
    }
  learner_created: true
- name: src/cinema/Ticket.java
  visible: true
  learner_created: true
- name: src/cinema/RefundTicket.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13377#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 13 Jan 2023 03:10:11 UTC"
record: 3
